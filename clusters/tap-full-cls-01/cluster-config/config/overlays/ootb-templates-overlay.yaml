apiVersion: v1
kind: Secret
metadata:
  name: ootb-templates-overlay
  namespace: tap-install
  annotations:
    kapp.k14s.io/change-group: overlays
    kapp.k14s.io/change-rule.0: "upsert before upserting pkgi"
    kapp.k14s.io/change-rule.1: "delete after deleting pkgi"
type: Opaque
stringData:
  ootb-templates-overlay.yaml: |
    #@ load("@ytt:overlay","overlay")
    #@ load("@ytt:data","data")
    #@ load("_profiles.star", "profiles")
    
    #@ def ct_matcher():
    apiVersion: tekton.dev/v1beta1
    kind: ClusterTask
    metadata:
      name: commit-and-pr
    #@ end

    #@ def cdt_matcher():
    apiVersion: carto.run/v1alpha1
    kind: ClusterDeploymentTemplate
    metadata:
      name: app-deploy
    #@ end
    
    #@ def cct_matcher():
    apiVersion: carto.run/v1alpha1
    kind: ClusterConfigTemplate
    metadata:
      name: config-template
    #@ end
    
    #@ if not profiles.is_any_enabled([profiles.run]):
    #@overlay/match by=overlay.subset(cct_matcher())
    ---
    spec:
      ytt: |-
        #@ load("@ytt:data", "data")
        #@ load("@ytt:yaml", "yaml")
        #@ load("@ytt:overlay", "overlay")
        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.workload.metadata, "labels"):
        #@     labels.update(data.values.workload.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end

        #@ def fix_permissions():
        spec:
          containers:
          #@overlay/match by="name"
          #@overlay/match-child-defaults missing_ok=True
          - name: workload
            securityContext:
              #@ if hasattr(data.values.config.spec.containers[0],"securityContext"):
              #@ if not hasattr(data.values.config.spec.containers[0].securityContext, "runAsGroup"):
              runAsGroup: 1000
              #@ end
              #@ if hasattr(data.values.config.spec.containers[0].securityContext, "runAsUser"):
              #@ if data.values.config.spec.containers[0].securityContext.runAsUser == 1000:
              runAsUser: 1001
              #@ end
              #@ end
              #@ end
        #@ end

        #@ def delivery():
        apiVersion: serving.knative.dev/v1
        kind: Service
        metadata:
          name: #@ data.values.workload.metadata.name
          #! annotations NOT merged because knative annotations would be invalid here
          annotations:
            ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
            ootb.apps.tanzu.vmware.com/apidescriptor-ref: "true"
            kapp.k14s.io/change-rule: "upsert after upserting servicebinding.io/ServiceBindings"
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          template: #@ overlay.apply(data.values.config,fix_permissions())
        #@ end

        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: #@ data.values.workload.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
        data:
          delivery.yml: #@ yaml.encode(delivery())
    #@ end
    
    #@ if not profiles.is_any_enabled([profiles.run]):
    #@overlay/match by=overlay.subset(ct_matcher())
    ---
    spec:
      steps:
      #@overlay/match by=overlay.subset({"name":"open-pr"})
      - script: |
          #!/usr/bin/env bash
          set -o errexit
          set -o pipefail
          head_branch=$(cat /workspaces/ws/commit_branch | tr -d '\n')
          token=$(cat $(credentials.path)/.git-credentials | sed -e 's/https:.*://' | sed -e 's/http:.*://' | sed -e 's/@.*//')
          jx-scm pull-request create \
            --kind "$(params.git_server_kind)" \
            --server "$(params.git_server_address)" \
            --token "$token" \
            --owner "$(params.repository_owner)" \
            --name "$(params.repository_name)" \
            --head "$head_branch" \
            --title "$(params.pull_request_title)" \
            --body "$(params.pull_request_body)" \
            --base "$(params.base_branch)" \
            --allow-update 2>&1 |
          tee stdoutAndSterr.txt
    #@ end
    #@overlay/match by=overlay.subset(cdt_matcher())
    ---
    spec:
      ytt: |-
        #@ load("@ytt:data", "data")
        #@ load("@ytt:assert", "assert")
        #@ def merge_labels(fixed_values):
        #@   labels = {}
        #@   if hasattr(data.values.deliverable.metadata, "labels"):
        #@     labels.update(data.values.deliverable.metadata.labels)
        #@   end
        #@   labels.update(fixed_values)
        #@   return labels
        #@ end
        ---
        apiVersion: kappctrl.k14s.io/v1alpha1
        kind: App
        metadata:
          name: #@ data.values.deliverable.metadata.name
          labels: #@ merge_labels({ "app.kubernetes.io/component": "deploy" })
        spec:
          syncPeriod: 10m0s
          serviceAccountName: #@ data.values.params.serviceAccount
          fetch:
            - http:
                url: #@ data.values.deployment.url or assert.fail("missing required deployment config url")
                #@ if hasattr(data.values.deliverable.spec.source, "subPath"):
                subPath: #@ data.values.deliverable.spec.source.subPath
                #@ elif hasattr(data.values.params, "gitops_sub_path"):
                subPath: #@ data.values.params.gitops_sub_path
                #@ end
            - inline:
                paths:
                  #@ if hasattr(data.values.params, "registry_change"):
                  #@yaml/text-templated-strings
                  registry-change.yaml: |
                    ---
                    #@ load("@ytt:overlay","overlay")
                    ---
                    #@ devRegistry = "(@= data.values.params.registry_change.origin  @)"
                    #@ newRegistry = "(@= data.values.params.registry_change.pullFrom  @)"
                    #@overlay/match by=overlay.subset({"kind":"Service"})
                    ---
                    spec:
                      template:
                        spec:
                          containers:
                          #@overlay/match by="name"
                          - name: workload
                            #@overlay/replace via=lambda left, right: left.replace(devRegistry, right)
                            image: #@ newRegistry
                  #@ end
                  config.yml: |
                    ---
                    apiVersion: kapp.k14s.io/v1alpha1
                    kind: Config
                    rebaseRules:
                      - path: [metadata, annotations, serving.knative.dev/creator]
                        type: copy
                        sources: [new, existing]
                        resourceMatchers: &matchers
                          - apiVersionKindMatcher: {apiVersion: serving.knative.dev/v1, kind: Service}
                      - path: [metadata, annotations, serving.knative.dev/lastModifier]
                        type: copy
                        sources: [new, existing]
                        resourceMatchers: *matchers
          template:
            - ytt: {}
            - kbld: {}
          deploy:
            - kapp: {}
