#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")

#@ data_values = data.values.tap_install.values
#@ def get_sc_values(data_values):
#@   if hasattr(data_values, "ootb_supply_chain_basic"):
#@     return data_values.ootb_supply_chain_basic
#@   end
#@   if hasattr(data_values, "ootb_supply_chain_testing"):
#@     return data_values.ootb_supply_chain_testing
#@   end
#@   if hasattr(data_values, "ootb_supply_chain_testing_scanning"):
#@     return data_values.ootb_supply_chain_testing_scanning
#@   end
#@ end

#@ def ext_dlv(data_values):
#@   if data_values.profile == "build":
#@     return True
#@   else:
#@     return False
#@   end
#@ end

#@ def collect_values(data_values):
#@  values = {
#@    "registry": {
#@      "ca_cert_data": "",
#@      "server": "",
#@      "repository": "",
#@    },
#@    "external_delivery": ext_dlv(data_values)
#@  }:
#@  values.update(struct.decode(get_sc_values(data_values)))
#@  if hasattr(data_values.shared, "ca_cert_data") and data_values.shared.ca_cert_data:
#@    values["registry"]["ca_cert_data"] = data_values.shared.ca_cert_data
#@  end
#@  if hasattr(data_values.shared, "image_registry") and hasattr(data_values.shared.image_registry, "project_path") and data_values.shared.image_registry.project_path:
#@    if not hasattr(get_sc_values(data_values), "registry") or not hasattr(get_sc_values(data_values).registry, "server") or not hasattr(get_sc_values(data_values).registry, "repository") or not get_sc_values(data_values).registry.server or not get_sc_values(data_values).registry.repository:
#@      image_repository = data_values.shared.image_registry.project_path.split("/", 1)
#@      values["registry"]["server"] = image_repository[0]
#@      values["registry"]["repository"] = image_repository[1].rstrip("/") + "/workloads"
#@    end
#@  end
#@  return struct.encode(values)
#@ end

#@ if not data_values.supply_chain == "basic":
#@ if data_values.profile == "full" or  data_values.profile == "light" or data_values.profile == "iterate" or data_values.profile == "build":

---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: ootb-supply-chain-basic
  namespace: tap-install
  annotations:
    kapp.k14s.io/change-rule.0: "upsert after upserting pkgi"
    kapp.k14s.io/change-rule.1: "delete before deleting pkgi"
spec:
  serviceAccountName: tap-install-sa
  packageRef:
    refName: ootb-supply-chain-basic.tanzu.vmware.com
    versionSelection:
      constraints: 0.12.4
      prereleases: {}
  values:
  - secretRef:
      name: ootb-supply-chain-basic-values
---
apiVersion: v1
kind: Secret
metadata:
  name: ootb-supply-chain-basic-values
  namespace: tap-install
type: Opaque
stringData:
  values.yml: #@ yaml.encode(collect_values(data_values))

#@ end
#@ end
