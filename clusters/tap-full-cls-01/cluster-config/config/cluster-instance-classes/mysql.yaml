#@ load("@ytt:data", "data")

#@ if data.values.custom.compositions.mysql.enabled:
---
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xmysqlinstances.tap.terasky.com
  annotations:
    kapp.k14s.io/change-group: compositions
    kapp.k14s.io/change-rule.0: "upsert after upserting pkgi"
    kapp.k14s.io/change-rule.1: "delete before deleting pkgi"
spec:
  connectionSecretKeys:
  - host
  - password
  - port
  - provider
  - type
  - username
  - database
  group: tap.terasky.com
  names:
    kind: XMySQLInstance
    plural: xmysqlinstances
  claimNames:
    kind: MySQLInstance
    plural: mysqlinstances    
  versions:
  - name: v1alpha1
    referenceable: true
    schema:
      openAPIV3Schema:
        properties:
          spec:
            description: The OpenAPIV3Schema of this Composite Resource Definition.
            properties:
              storageGB:
                description: The desired storage capacity of a single replica, in GB.
                type: integer               
            type: object
        type: object
    served: true
---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xmysqlinstances.tap.terasky.com
  annotations:
    kapp.k14s.io/change-group: compositions
    kapp.k14s.io/change-rule.0: "upsert after upserting pkgi"
    kapp.k14s.io/change-rule.1: "delete before deleting pkgi"
spec:
  compositeTypeRef:
    apiVersion: tap.terasky.com/v1alpha1
    kind: XMySQLInstance
  publishConnectionDetailsWithStoreConfigRef:
    name: default
  resources:
  - base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Namespace
    patches:
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      type: FromCompositeFieldPath
  - base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            data:
              .dockerconfigjson: e30K
            kind: Secret
            metadata:
              annotations:
                secretgen.carvel.dev/image-pull-secret: ""
              name: regsecret
              namespace: ""
            type: kubernetes.io/dockerconfigjson
    patches:
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      type: FromCompositeFieldPath
  - base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        connectionDetails:
        - apiVersion: v1
          fieldPath: data.provider
          kind: Secret
          namespace: ""
          toConnectionSecretKey: provider
        - apiVersion: v1
          fieldPath: data.type
          kind: Secret
          namespace: ""
          toConnectionSecretKey: type
        - apiVersion: v1
          fieldPath: data.host
          kind: Secret
          namespace: ""
          toConnectionSecretKey: host
        - apiVersion: v1
          fieldPath: data.port
          kind: Secret
          namespace: ""
          toConnectionSecretKey: port
        - apiVersion: v1
          fieldPath: data.username
          kind: Secret
          namespace: ""
          toConnectionSecretKey: username
        - apiVersion: v1
          fieldPath: data.password
          kind: Secret
          namespace: ""
          toConnectionSecretKey: password
        - apiVersion: v1
          fieldPath: data.database
          kind: Secret
          namespace: ""
          toConnectionSecretKey: database
        forProvider:
          manifest:
            apiVersion: with.sql.tanzu.vmware.com/v1
            kind: MySQL
            metadata:
              namespace: ""
            spec:
              highAvailability:
                enabled: false
              imagePullSecretName: regsecret
            storageSize: 1Gi
        writeConnectionSecretToRef:
          namespace: crossplane-system
    connectionDetails:
    - fromConnectionSecretKey: provider
    - fromConnectionSecretKey: type
    - fromConnectionSecretKey: host
    - fromConnectionSecretKey: port
    - fromConnectionSecretKey: username
    - fromConnectionSecretKey: password
    - fromConnectionSecretKey: database
    patches:
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.forProvider.manifest.metadata.name
      type: FromCompositeFieldPath
    - fromFieldPath: spec.replicas
      toFieldPath: spec.forProvider.manifest.spec.replicas
      type: FromCompositeFieldPath
    - fromFieldPath: spec.storageGB
      toFieldPath: spec.forProvider.manifest.spec.storageSize
      transforms:
      - string:
          fmt: '%dGi'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - string:
          fmt: '%s-rmq'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[0].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[1].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[2].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[3].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[4].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[5].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[6].name
      transforms:
      - string:
          fmt: '%s-app-user-db-secret'
          type: Format
        type: string
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[0].namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[1].namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[2].namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[3].namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[4].namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[5].namespace
      type: FromCompositeFieldPath
    - fromFieldPath: metadata.name
      toFieldPath: spec.connectionDetails[6].namespace
      type: FromCompositeFieldPath
    readinessChecks:
    - fieldPath: status.atProvider.manifest.status.phase
      matchString: Running
      type: MatchString
---
apiVersion: services.apps.tanzu.vmware.com/v1alpha1
kind: ClusterInstanceClass
metadata:
  name: mysql
  annotations:
    kapp.k14s.io/change-group: compositions
    kapp.k14s.io/change-rule.0: "upsert after upserting pkgi"
    kapp.k14s.io/change-rule.1: "delete before deleting pkgi"
spec:
  description:
    short: MySQL
  provisioner:
    crossplane:
      compositeResourceDefinition: xmysqlinstances.tap.terasky.com
#@ end
